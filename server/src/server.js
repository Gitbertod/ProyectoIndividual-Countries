const express = require("express");
const router = require("./routes");
const morgan = require("morgan");
const cors = require("cors");
const { Activity, Country } = require('./db');
const server = express();

server.use(morgan("dev"));
server.use(express.json());
server.use(cors());

const { Op } = require('sequelize');

server.use(router);


/**游늸 GET | /countries
Obtiene un arreglo de objetos, donde cada objeto es un pa칤s con toda su informaci칩n.*/
server.get('/countries', async (req, res) => {
    try {
       const {nombre} = req.query;
       if(nombre){
        
       }
        const allCountries = await Country.findAll()
        res.status(200).json(allCountries);
    } catch (error) {
        res.status(404).send(error.message);
    }
})

/*游늸 GET | /countries/:idPais
Esta ruta obtiene el detalle de un pa칤s espec칤fico. Es decir que devuelve un objeto con la informaci칩n pedida en el detalle de un pa칤s.
El pa칤s es recibido por par치metro (ID de tres letras del pa칤s).
Tiene que incluir los datos de las actividades tur칤sticas asociadas a este pa칤s.*/
server.get('/countries/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const foundCountry = await Country.findByPk(id);

        res.status(200).json(foundCountry);
    } catch (error) {
        res.status(404).send(error.message);
    }
})


/*游늸 GET | /countries/name?="..."
Esta ruta debe obtener todos aquellos pa칤ses que coinciden con el nombre recibido por query. (No es necesario que sea una coincidencia exacta).
Debe poder buscarlo independientemente de may칰sculas o min칰sculas.
Si no existe el pa칤s, debe mostrar un mensaje adecuado.
*/
server.get('countries/name', async (nombre) => {
    try {
        
        const findName = await Country.findOne({
            where: {
                nombre: nombre
            }
        })
        
        if(findName === null){
            throw new Error("No se consiguio")
        }
        
    } catch (error) {
        throw Error('Error al obtener pa칤ses por nombre:', error);
    }
})

//{ [Op.iLike]: `%${nombre}%` }

/*游늸 POST | /activities
Esta ruta recibir치 todos los datos necesarios para crear una actividad tur칤stica y relacionarla con los pa칤ses solicitados.
Toda la informaci칩n debe ser recibida por body.
Debe crear la actividad tur칤stica en la base de datos, y esta debe estar relacionada con los pa칤ses indicados (al menos uno).*/



/* 游늸 GET | /activities
Obtiene un arreglo de objetos, donde cada objeto es una actividad tur칤stica.*/
server.get('/activities', async (req, res) => {
    try {
        const allActivities = await Activity.findAll()
        res.status(200).json(allActivities);
    } catch (error) {
        res.status(404).send(error.message);
        
    }
})


//*** Borrar actividad*/
server.delete('/activities/:id', async (req, res) => {
    try {
        const { id } = req.params;
        const activityDeleted = await Activity.findByPk(id);
        activityDeleted.destroy();
        res.status(200).json(activityDeleted);
    } catch (error) {
        res.status(404).send(error.message);
    }
})
module.exports = server;

